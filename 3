from jetbot import Camera
import ipywidgets.widgets as widgets
from IPython.display import display
import traitlets
from jetbot import bgr8_to_jpeg
import torch
import torchvision
import ipywidgets
import torchvision.models as models
from utils import preprocess
import torch.nn.functional as F
import time
from jetbot import Robot

camera = Camera.instance(width=224, height=224)
image = widgets.Image(format='jpeg', width=224, height=224)
display(image)

model = models.resnet18(pretrained=True)
model.fc = torch.nn.Linear(model.fc.in_features, 2)

model.load_state_dict(torch.load('my_model.pth'))
device = torch.device('cpu')  # CUDA를 사용하지 않고 CPU로 설정
model = model.to(device)

robot = Robot()

def update(change):
    global robot
    x = change['new']
    
    try:
        # 그라디언트 비활성화하고 모델 추론
        with torch.no_grad():
            x = preprocess(x)
            x = x.to(device)
            y = model(x)
        
        y = F.softmax(y, dim=1)
        
        prob_circle = float(y.flatten()[1])
        prob_square = float(y.flatten()[0])
        
        if prob_circle > 0.6:
            robot.set_motors(1, 1)
            robot.right(0.5)
            time.sleep(1.78)
            robot.stop()
        else:
            # 카메라 인식 실패 시 로봇 앞으로 이동 후 정지
            robot.set_motors(0.5, 0.5)
            time.sleep(1.0)  # 조절 가능한 시간
            robot.stop()
    
    except Exception as e:
        print(f"Error: {e}")
        # 카메라 인식 실패 시 로봇 앞으로 이동 후 정지
        robot.set_motors(0.5, 0.5)
        time.sleep(1.0)  # 조절 가능한 시간
        robot.stop()

# 딜레이 추가하여 transform 함수에 연결
camera_link = traitlets.dlink((camera, 'value'), (image, 'value'), transform=bgr8_to_jpeg, link_func=lambda x: x, validate=False)

# 카메라 업데이트 콜백 등록
camera.observe(update, names='value')

# 딜레이 추가
try:
    while True:
        time.sleep(0.001)
except KeyboardInterrupt:
    # 프로그램 종료 시 카메라 정지 및 해제
    camera.unobserve(update, names='value')
    camera_link.unlink()
    camera.stop()
    robot.stop()
    print("Program terminated.")
